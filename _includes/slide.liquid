{% comment %}
Usage:
  {% include slide.liquid folder="/assets/courses/deeplearning/cnn/dnn_cnn" %}
{% endcomment %}

{% assign target_folder = include.folder %}
{% assign my_slides = site.static_files 
  | where_exp: "file", "file.path contains target_folder" 
  | sort: "path" 
%}

<div class="slideshow-wrapper">
  <!-- TOP BAR -->
  <div class="slideshow-top-controls">
    <!-- Hamburger (Preview Button) pinned on the left -->
    <div class="preview-left">
      <div class="slide-preview-button" onclick="togglePreview()">
        &#9776;  <!-- or any icon you like -->
      </div>
    </div>

    <!-- The center group: arrows + slide counter -->
    <div class="controls-center">
      <a class="prev" onclick="plusSlides(-1)">&#10094;</a>
      <div class="slide-counter">
        <input 
          type="number"
          id="slideNumberInput"
          class="slide-number-input"
          min="1"
          max="{{ my_slides.size }}"
          value="1"
        />
        <span class="slash">/</span>
        <span id="slideTotal">{{ my_slides.size }}</span>
      </div>
      <a class="next" onclick="plusSlides(1)">&#10095;</a>
    </div>
  </div>

  <!-- Main layout: side preview panel + main slideshow area -->
  <div class="slide-layout">
    <!-- Collapsible Preview Panel -->
    <div id="slidePreviewPanel" class="slide-preview-panel">
      <div class="slide-preview-header">
      </div>
      <div class="slide-preview-thumbs">
        {% for file in my_slides %}
        <div class="slide-thumbnail" onclick="showSlides({{ forloop.index }})">
          <img src="{{ file.path | relative_url }}" alt="Slide {{ forloop.index }}" />
          <span>Slide {{ forloop.index }}</span>
        </div>
        {% endfor %}
      </div>
    </div>

    <!-- Main Slide Content -->
    <div class="main-slide-content">
      <div class="slideshow-container">
        {% for file in my_slides %}
          <div class="mySlide">
            <img 
              src="{{ file.path | relative_url }}"
              alt="{{ file.name }}"
            />
          </div>
        {% endfor %}
      </div>

      <!-- Bottom Range Slider + Progress Bar -->
      <div class="slideshow-footer-overlap">
        <div class="slide-range-wrapper">
          <div class="slide-progress-overlap">
            <div class="slide-progress-bar-overlap"></div>
          </div>
          <input
            type="range"
            id="slideRange"
            min="1"
            max="{{ my_slides.size }}"
            value="1"
            step="1"
            class="slide-range-overlap"
          />
        </div>
      </div>
    </div>
  </div>
</div>

<script>
  let slideIndex = 1;
  const totalSlides = {{ my_slides.size }};

  // Initialize
  showSlides(slideIndex);

  // Next/previous controls
  function plusSlides(n) {
    showSlides(slideIndex + n);
  }

  // Show a specific slide
  function showSlides(n) {
    const slides = document.getElementsByClassName("mySlide");
    if (n > slides.length) n = 1;
    if (n < 1) n = slides.length;
    slideIndex = n;

    // Hide all slides
    for (let i = 0; i < slides.length; i++) {
      slides[i].style.display = "none";
    }
    // Show current slide
    slides[slideIndex - 1].style.display = "block";

    // Update typed number input
    const slideNumberInput = document.getElementById("slideNumberInput");
    if (slideNumberInput) {
      slideNumberInput.value = slideIndex;
    }

    // Update the range slider
    const slideRange = document.getElementById("slideRange");
    if (slideRange) {
      slideRange.value = slideIndex;
    }

    // Update the progress bar
    updateProgressBar(slideIndex, slides.length);
  }

  function updateProgressBar(current, total) {
    const bar = document.querySelector(".slide-progress-bar-overlap");
    if (!bar) return;
    const percent = (current / total) * 100;
    bar.style.width = percent + "%";
  }

  // Keyboard navigation
  document.addEventListener("keydown", (e) => {
    if (e.key === "ArrowLeft") {
      plusSlides(-1);
    } else if (e.key === "ArrowRight") {
      plusSlides(1);
    }
  });

  // Typed changes
  const slideNumberInput = document.getElementById("slideNumberInput");
  if (slideNumberInput) {
    slideNumberInput.addEventListener("change", function() {
      let val = parseInt(this.value, 10);
      if (!isNaN(val)) showSlides(val);
    });
  }

  // Range slider changes
  const slideRange = document.getElementById("slideRange");
  if (slideRange) {
    slideRange.addEventListener("input", function() {
      let val = parseInt(this.value, 10);
      if (!isNaN(val)) showSlides(val);
    });
  }

  // Toggle the side preview panel
  function togglePreview() {
    const panel = document.getElementById("slidePreviewPanel");
    // Toggle class "open"
    if (panel.classList.contains("open")) {
      panel.classList.remove("open");
    } else {
      panel.classList.add("open");
    }
  }
</script>
